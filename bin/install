#!/usr/bin/env fish
# Oh My Fish installer. See `install --help` for usage.
#
# USAGE
#   #1: curl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish
#   #2: curl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/bin/install > install; and fish install
#   #3: env OMF_CONFIG=~/.omf curl -L https://github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish
#
# ENV
#   OMF_REPO_URI      Oh My Fish source git repository
#   OMF_REPO_BRANCH   Oh My Fish source repository branch

set -q OMF_REPO_URI;    or set OMF_REPO_URI "https://github.com/oh-my-fish/oh-my-fish"
set -q OMF_REPO_BRANCH; or set OMF_REPO_BRANCH "master"

set OMF_FISH_MIN_VER 2 2 0


function main
  # Set default settings
  set -q XDG_DATA_HOME
    and set -g PREFIX "$XDG_DATA_HOME"
    or set -g PREFIX "$HOME/.local/share"

  set -q XDG_CONFIG_HOME
    and set -g CONFIG_PATH "$XDG_CONFIG_HOME"
    or set -g CONFIG_PATH "$HOME/.config"

  set -g OMF_CONFIG "$CONFIG_PATH/omf"
  set -g FISH_CONFIG "$CONFIG_PATH/fish"

  # Parse args
  while set -q argv[1]
    switch "$argv[1]"
      case --help -h '/?'
        echo "Usage: install [options]
  Install Oh My Fish

Options:
  --config=<path>         Put config in a specific path (default is $OMF_CONFIG)
  --help                  Show this help message
  --offline               Offline install
  --prefix=<path>         Install to a specific path (default is $PREFIX)
  --yes, -y               Disable interactive questions
"
        return 0

      case '--config=*'
        echo "$argv[1]" | cut -d= -f2 | read -g OMF_CONFIG

      case --offline
        set -g OFFLINE

      case '--prefix=*'
        echo "$argv[1]" | cut -d= -f2 | read -g PREFIX

      case --yes -y
        set -g NONINTERACTIVE
    end
    set -e argv[1]
  end

  # Noninteractive
  isatty
    or set -g NONINTERACTIVE

  set -g OMF_PATH "$PREFIX/omf"

  if test -d "$OMF_PATH"
    report error "Aborting: Existing installation detected at $OMF_PATH."
  end

  if not type -q git
    report error "Aborting: Installation requires Git."
  end

  if not fish_version_compatible
    set -l minimum_version_string (echo $OMF_FISH_MIN_VER | sed 's/ /./g')
    report error "Aborting: Detected fish $version, but Oh My Fish requires fish $minimum_version_string or greater."
  end

  install-omf
    and create-config
    or report error "Oh My Fish installation failed.\n\nIf you think that it's a bug, please open an\nissue with the complete installation log here:\n\nhttp://github.com/oh-my-fish/oh-my-fish/issues"

  report success "Installation successful!"
  set -q CI; or exec fish < /dev/tty
  return 0
end

function report -a what message
  switch $what
  case 'info'
    set_color blue
  case 'success'
    set_color green
  case 'error'
    set_color red
    printf "error: $message\n"
    set_color normal
    exit 1
  end

  printf "$message\n"
  set_color normal
end

function fish_version_compatible
  set -q FISH_VERSION; or set -l FISH_VERSION $version
  set -l major (echo $FISH_VERSION | cut -d. -f1)
  set -l minor (echo $FISH_VERSION | cut -d. -f2)

  return (test $major = $OMF_FISH_MIN_VER[1] -a $minor -ge $OMF_FISH_MIN_VER[2])
end


function backup-file -a file_path
  test -e "$file_path"; or return 1

  set -l path (dirname $file_path)
  set -l file (basename $file_path)
  set -l name (echo $file | cut -d. -f1)

  set -l timestamp (date +%s)
  set -l backup_file "$path/$name.$timestamp.copy"

  report progress "Existent $file found at $path"
  report progress "â†³ Moving to $backup_file"

  if not mv "$file_path" $backup_file 2>/dev/null
    report error "Aborting: Could not backup $file_path"
  end

  return 0
end

function install-omf
  report progress "Installing Oh My Fish to $OMF_PATH..."

  # Prepare paths
  mkdir -p "$PREFIX"

  # Grant repository URL ends with .git
  set git_uri (echo $OMF_REPO_URI | sed 's/\.git//').git

  if set -q OFFLINE
    dirname (dirname (status -f)) | read local_repo

    if not test -d "$local_repo"
      report error "Could not access local installation"
    end

    cp -r "$local_repo" "$OMF_PATH"
  else
    report progress "Cloning $OMF_REPO_BRANCH from $git_uri..."
    if not git clone -q --depth 1 -b $OMF_REPO_BRANCH $git_uri "$OMF_PATH"
      report error "Error cloning repository!"
    end
  end

  set git_upstream (git --git-dir "$OMF_PATH/.git" --work-tree "$OMF_PATH" config remote.upstream.url)

  if test -z "$git_upstream"
    git --git-dir "$OMF_PATH/.git" --work-tree "$OMF_PATH" remote add upstream $git_uri
  else
    git --git-dir "$OMF_PATH/.git" --work-tree "$OMF_PATH" remote set-url upstream $git_uri
  end
end

function create-config
  set fish_config_file "$FISH_CONFIG/config.fish"

  backup-file "$fish_config_file"
    or mkdir -p "$FISH_CONFIG"

  backup-file "$FISH_CONFIG/functions/fish_prompt.fish"

  report progress "Adding startup code to fish config file..."

  set template "templates/config.fish"
  set replacements "s|{{OMF_CONFIG}}|$OMF_CONFIG|"

  if test "$OMF_CONFIG" != "$CONFIG_PATH/omf"
    set replacements "$replacements;s|#set|set|"
  end

  sed "$replacements" "$OMF_PATH/$template" > "$fish_config_file"

  report progress "Building Oh My Fish configuration..."

  if not test -d "$OMF_CONFIG"
    mkdir -p "$OMF_CONFIG"
  end

  test -f "$OMF_CONFIG/bundle"; or echo "theme default" > "$OMF_CONFIG/bundle"
  test -f "$OMF_CONFIG/theme";  or echo "default" > "$OMF_CONFIG/theme"

  fish -c "omf install"
end

# Silent wrapper around set_color
function set_color
  builtin set_color $argv ^ /dev/null
end

main $argv
